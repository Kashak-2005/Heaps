import java.util.ArrayList;

class MinHeap {
    private ArrayList<Integer> heap;

    public MinHeap() {
        heap = new ArrayList<>();
    }

    public void insert(int value) {
        heap.add(value); // Add to the end
        int currentIndex = heap.size() - 1;
        int parentIndex = (currentIndex - 1) / 2;

        // Bubble up
        while (currentIndex > 0 && heap.get(currentIndex) < heap.get(parentIndex)) {
            swap(currentIndex, parentIndex);
            currentIndex = parentIndex;
            parentIndex = (currentIndex - 1) / 2;
        }
    }

    public int remove() {
        if (heap.isEmpty()) {
            throw new IllegalStateException("Heap is empty");
        }

        int root = heap.get(0);
        int lastIndex = heap.size() - 1;

        // Replace root with the last element
        heap.set(0, heap.get(lastIndex));
        heap.remove(lastIndex);

        // Bubble down
        heapify(0);
        return root;
    }

    private void heapify(int index) {
        int leftChildIndex = 2 * index + 1;
        int rightChildIndex = 2 * index + 2;
        int smallest = index;

        // Find the smallest among the current node and its children
        if (leftChildIndex < heap.size() && heap.get(leftChildIndex) < heap.get(smallest)) {
            smallest = leftChildIndex;
        }
        if (rightChildIndex < heap.size() && heap.get(rightChildIndex) < heap.get(smallest)) {
            smallest = rightChildIndex;
        }

        // Swap and recursively heapify if the smallest is not the current index
        if (smallest != index) {
            swap(index, smallest);
            heapify(smallest);
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    public void printHeap() {
        System.out.println(heap);
    }
}

public class MinHeapExample {
    public static void main(String[] args) {
        MinHeap minHeap = new MinHeap();

        minHeap.insert(10);
        minHeap.insert(20);
        minHeap.insert(5);
        minHeap.insert(15);
        minHeap.insert(30);

        System.out.println("Heap after inserts:");
        minHeap.printHeap();

        System.out.println("Removed: " + minHeap.remove());
        System.out.println("Heap after removal:");
        minHeap.printHeap();
    }
}
